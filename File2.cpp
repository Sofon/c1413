# include <iostream>
#include <conio.h>
#include <stdlib.h>
using namespace std;
// обьявляем глобальные переменные
// n - размерность матрицы
// i,j - индексы
// *schetZero - одномерный массив (вектор), хранящий кол-во нулей в каждом столбце
// **Mas - двумерная матрица
// sum - переменная для хранения суммы элементов диагонали и выше неё
int n,i,j,*schetZero, **Mas, sum=0;
// - переменная, принимающаяя значение 0 или 1, флаг для проверки есть в столбцах 2 нуля или нет
bool flag=false;

//Процедура – это подпрограмма, которая может вызываться в коде основной программы и производить какие либо действия
//с переданными в нее переменными или с использованием глобальных переменных

//Функция – это такая же процедура, только ей свойственно явное возвращение результат ее работы.

// если объявлять:
//					int print_Result()
//				или	double print_Result()
//				или	float print_Result(), то функция обязательно должна возвращять значение, а если так:
//				void print_Result() - то функция не должна возвращать ничего
//				с помощью таких функций удобно работать с глобальными переменными,
//				когда в функцию ничего не передаётся и она ничего не возвращает

// функция вывода результата на экран
void print_Result()
{
	if(flag) // проверяем, если флаг того, что есть 2 нуля в каком-то столбце =true, то
		cout<<"V kakom-to stolbce est' 2 i bolsche nuley!\n";
	else // иначе
		cout<<"summa = "<<sum<<"\n";
}

// функция подсчёта суммы элементов главной диагонали и всего что выше неё
void summ()
{
	if(!flag) // ведём счёт, если только флаг того, что есть 2 нуля в каком-то столбце =false
		for (i = 0; i < n; i++) // перебираем все столбцы
			for (j = i; j < n; j++) // в строке берём элемент начиная с главной диагонали
				sum+=Mas[i][j]; // прибавляем к сумме
}

// функция для проверки на наличи 2-х нулей в столбце
void proverka()
{
	for(j=0;j<n;j++) // берём столбец
		for(i=0;i<n;i++) // пробегаем по всем строкам столбца
			if(Mas[i][j]==0) //если элемент массива 0, то
				schetZero[j]++; //j-тый элемент массива, хранящего кол-во нулей в стобцах +1
	for(i=0;i<n;i++)
		if(schetZero[i]>=2) // проверяем весь массив, хранящий кол-во нулей в столбцах
		{ // если есть хоть один элемент, где кол-во нулей >=2
			flag=true; // ставим флаг в значение true (1)
			break; // прерываем цикл проверки
		}
}

// функция вывода введённой матрицы на экран
void print_Matrix()
{
	cout<<"Vvedennaya matrica:\n";
		for(i=0;i<n;i++) // для каждой строки
		{
			for(j=0;j<n;j++) // перебираем все столбцы
			{
				cout<<Mas[i][j]<<"\t"; // выводм на экран и табулируем \t
			}
			cout<<"\n"; // столбцы кончились - переводим курсор на новую строку
		}
}

// главная функция программы
int main()
{

	cout<<"Vvedite razmer matrici NxN: ";
    cin >> n;
	// выделяем динамический массив из n элементов под хранение кол-ва нулей в столбцах
	schetZero = new int [n];
	// обнуляем все элементы массива schetZero
	for(i=0;i<n;i++)
		schetZero[i]=0;
	// выделяем двумерный динамический массив из n*n
	Mas=new int *[n];
	for(i=0;i<n;i++)
		Mas[i]=new int[n];
	// блок выделения двумерного массива закончился

	// вводим массив
	for(i=0;i<n;i++)
		for(j=0;j<n;j++)
		{
			system("cls");
			cout<<"Vvedite ["<<i+1<<"]["<<j+1<<"] element matrici: ";
			cin>>Mas[i][j];
		}
		// вызываем функцию вывода введённой матрицы на экран
		print_Matrix();
		// вызываем функцию для проверки на наличи 2-х нулей в столбце
		proverka();
		// если ни в каком из столбцов нет 2 и более нулей, то
		if(!flag)
			// вызываем функцию подсчёта суммы элементов главной диагонали и всего что выше неё
			summ();
		// вызываем функцию вывода результата на экран
		print_Result();
		// останавливаем выполнение программы, пока пользователь не нажмёт Enter
 getch();
 return 0;
}
